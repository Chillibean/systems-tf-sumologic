[
  {
    "Deploy": {
      "Bitbucket": {
        "Scope": "_sourceCategory = Labs/bitbucket deploymentEnvironment pipe_result_link deploy_status commit_link",
        "Parse": "json field=_raw  "deploymentEnvironment",  "repoFullName", "pipe_result_link", "deploy_status", "commit",  "event_date", "prDestinationBranch", "repoOwner", "buildNumber"  as environment_name,
repository_name, link, status, commit_id, datetime, target_branch, user,
title
| commit_id as trace_id
| "n/a" as team
| concat("build number ", title, ". Commiit link ", link) as message 
| parse regex field=datetime "(?<dateTime_epoch>[\S]+)
(?<datetime>[\S]+)"
| concat(datetime_epoch,"T",dateTime) as datetime_epoch
| parseDate(datetime_epoch, "yyyy-MM-dd'T'HH:mm:ss") as datetime_epoch
| if (status matches "0", "Success", "Failed") as status
| "deploy" as event_type
"
      },
      "Jenkins": {
        "Scope": "_sourceCategory=Labs/Jenkins/deploy_event trace_id",
        "Parse": "json "event_type", "team",  "service", "trace_id", "user", "link", "title", "timeStamp", "message", "env_name", "result", "target_branch",
"repository_name", "commit_id" as event_type, team, service, trace_id,
user, link, title, datetime, message, environment_name, status,
target_branch, repository_name, commit_id
| toLong(datetime) as datetime_epoch
| "deploy" as event_type
"
      },
       "CircleCI":{
        "Scope" : "_sourcecategory=circleci/job-collector",
        "Parse" : "json "workflows.job_name" as job_type
|where toLowerCase(job_type) matches ("*deploy*")
|json "custom_data.env","custom_data.team","custom_data.service","workflows.job_id","user.login","build_url","start_time","branch","outcome","reponame","vcs_revision","job_name","messages","build_num" as environment_name,team,service,trace_id,user,link,datetime,target_branch,job_status,repository_name,commit_id,job_name,message,job_num nodrop
| if(job_status == "success", "Success", "Failed") as status
| toLong(parseDate(datetime, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")) as datetime_epoch
| concat(job_type, " # ",job_num) as title
|"deploy" as event_type"
      }
    }
  },
  {
    "Pull Request": {
      "Github": {
        "Scope": "_sourceCategory = github/content %"x-github-event"=pull_request",
        "Parse": "json "action", "pull_request.title", "pull_request.created_at", "pull_request.merged_at" ,"repository.name" ,"pull_request.merged", "pull_request.html_url", "pull_request.merge_commit_sha", "pull_request.base.ref" , "pull_request.user.login",
"pull_request.labels[0].name", "pull_request.requested_reviewers[*].login" as action, title, dateTime, closeddate ,repository_name,  merge, link, commit_id, target_branch ,user, service, reviewers nodrop
 | where action in ("closed", "opened") 
 | parseDate(dateTime, "yyyy-MM-dd'T'HH:mm:ss") as dateTime_epoch
 | if(action matches "closed" and merge matches "true", "merged", if(action matches "closed" and merge matches "false", "declined", if (action matches "opened", "created", "other"  ))) as status
   | if (status="merged", parseDate(closeddate, "yyyy-MM-dd'T'HH:mm:ss") , 000000000 ) as closeddate_epoch
 | toLong(closeddate_epoch)
 | "pull_request" as event_type
"
      },
      "Bitbucket": {
        "Scope": "_sourceCategory=Labs/bitbucket %"x-event-key"=pullrequest:*",
        "Parse": "json "pullrequest.title", "pullrequest.destination.repository.full_name",  "pullrequest.destination.branch.name", "pullrequest.created_on", "pullrequest.author.display_name",  "pullrequest.state", 
"pullrequest.links.html.href", "pullrequest.merge_commit.hash", "pullrequest.reviewers[*].display_name", "pullrequest.updated_on" as title, repository_name, target_branch, dateTime, user, action, link,
commit_id, reviewers, closeddate nodrop
| parse regex field= datetime "(?<datetime_epoch>\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d)"  nodrop   
| parse regex field= closeddate
"(?<closeddate_epoch>\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d)"  nodrop   
            | parseDate(datetime_epoch, "yyyy-MM-dd'T'HH:mm:ss") as datetime_epoch
            | parseDate(closeddate_epoch, "yyyy-MM-dd'T'HH:mm:ss") as closeddate_epoch
            | parse regex field=%"x-event-key" ".+:(?<status>.+)"
            | if (status matches "created", "created", if(status matches "fulfilled", "merged", if(status matches "rejected", "declined", "other"))) as status 
            | "pull_request" as event_type
"
      }
    }
  },
  {
    "Issues": {
      "Jira": {
        "Scope": "_sourceCategory = Labs/jira-cloud issue_*",
        "Parse": "json field=_raw "issue_event_type_name", "issue.self",  "issue.key", "issue.fields.issuetype.name", "issue.fields.project.name", "issue.fields.status.statusCategory.name",  "issue.fields.priority.name", "issue.fields.components" as  issue_event_type, link, issue_key, issue_type, project_name, issue_status,  priority, service nodrop
| parse regex field=service "name\":\"(?<service>.+?)\",\"" nodrop
| "n/a" as team
| json "issue.fields.resolutiondate", "issue.fields.created" as closedDate, dateTime  
| parseDate(dateTime, "yyyy-MM-dd'T'HH:mm:ss.SSSZ") as datetime_epoch
| if (isNull(closeddate) , 00000000000, parseDate(closedDate, "yyyy-MM-dd'T'HH:mm:ss.SSSZ") ) as closeddate_epoch
| toLong(closeddate_epoch)
| "issue" as event_type
"
      }
    }
  },
  {
    "Build": {
      "Jenkins": {
        "Scope": "_sourceCategory=Labs/Jenkins/builds_event trace_id",
        "Parse": "json field=_raw "event_type"
| json "event_type", "team",  "service", "trace_id", "user", "link", "title", "timeStamp", "message", "env_name", "result", "target_branch", "repository_name", "commit_id" as event_type, team, service, trace_id, user, link, title, datetime, message, environment_name, status, target_branch, repository_name, commit_id nodrop
| parse regex field=_sourceName "(?<name>.+)#(?<build_number>.+)"
| toLong(datetime) as datetime_epoch
| "build" as event_type
"
      },
      "Jenkins Pipeline Stages": {
        "Scope": "_sourceCategory=Labs/Jenkins/Pipeline Pipeline_Stages",
        "Parse": "json "name", "number" as pipeline_name, pipeline_number
| json "stages" as StagesPipeline
| "pipeline" as event_type
"
      },
      "Bitbucket": {
        "Scope": "_sourceCategory = Labs/bitbucket %"x-event-key"=repo:commit_status_* ("SUCCESSFUL" OR "FAILED")",
        "Parse": "json "commit_status.state", "commit_status.commit.message", "commit_status.name", "actor.display_name", "repository.full_name",  "commit_status.refname", "commit_status.url", "commit_status.created_on", "commit_status.commit.hash",
"commit_status.repository.name" as status, message, title, user, repository_name, target_branch, link, datetime, commit_id, service 
| commit_id as trace_id
| "n/a" as team
| parse regex field= datetime
"(?<datetime_epoch>\d\d\d\d-\d\d-\d\dT\d\d:\d\d:\d\d)"  nodrop   
| parseDate(datetime_epoch, "yyyy-MM-dd'T'HH:mm:ss") as datetime_epoch
| where status in ("SUCCESSFUL", "FAILED")
| "build" as event_type
"
      },
      "CircleCI":{
        "Scope" : "_sourcecategory=circleci/job-collector",
        "Parse" : "| json "workflows.job_name" as job_type
|where toLowerCase(job_type) matches ("*build*")
|json "custom_data.env","custom_data.team","custom_data.service","workflows.job_id","user.login","build_url","start_time","branch","outcome","reponame","vcs_revision","job_name","build_num","messages" as environment_name,team,service,trace_id,user,link,datetime,target_branch,job_status,repository_name,commit_id,job_name,build_number,message nodrop
| if(job_status == "success", "Success", "Failed") as status
| toLong(parseDate(datetime, "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")) as datetime_epoch
| concat(job_type, " # ",build_number) as title
|"build" as event_type"
      }
    }
  },
  {
    "Alert": {
      "Opsgenie": {
        "Scope": "_sourcecategory=Labs/Opsgenie_alerts ("Close" or "Create")",
        "Parse": "json "alert.createdAt", "alert.updatedAt", "action", "alert.team", "alert.priority", "alert.source", "alert.alertId" as dateTime, closeddate, alert_type, team, priority, service, alert_id nodrop
| where alert_type in ("Close", "Create") 
| toLong(closeddate/1000) as closeddate_epoch
| toLong(datetime*1000) as datetime_epoch
| if (priority matches "p1", "high", if(priority matches "p2", "medium",  if(priority matches "p3", "medium",  if(priority matches
"p4", "low",  if(priority matches "p5", "low", "other")))))  as priority
| if (alert_type matches "*Create", "alert_created", if(alert_type  matches "*Close", "alert_closed", "other") ) as event_type
"
      },
      "PagerDuty": {
        "Scope": "_sourcecategory=Labs/pagerduty_v2 ("incident.trigger" or "incident.resolve" )",
        "Parse": "parse regex "(?<event>\{\"event\":\"incident\..+?\}(?=,\{\"event\":\"incident\..+|\]\}$))" 
|json  field=event "event", "created_on", "incident" as alert_type,
dateTime, incident
|json field=incident "id",  "service.name" , "urgency",
"teams[0].summary", "html_url"  as alert_id, service, priority, team,
link
|json  field=incident "created_at" as closeddate nodrop
| where alert_type in ("incident.trigger", "incident.resolve")
| parseDate(dateTime, "yyyy-MM-dd'T'HH:mm:ss'Z'") as dateTime_epoch
| parseDate(closeddate, "yyyy-MM-dd'T'HH:mm:ss'Z'") as closeddate_epoch
| if (alert_type matches "*trigger", "alert_created", if(alert_type matches "*resolve", "alert_closed", "other") ) as event_type
"
      }
    }
  }
]